<?xml version='1.0'?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd"
[]
>

<article>
  <articleinfo>
    <title>The Orocos Comedi Interface</title>
    <copyright>
      <year>2008</year>
      <holder>Peter.Soetens@fmtc.be</holder>
    </copyright>

    <abstract>
      <para>
	This document explains how to setup the Comedi layer
	for Orocos applications.
      </para>
    </abstract>

    <legalnotice>
      <para>
	Permission is granted to copy, distribute and/or modify this
	document under the terms of the GNU Free Documentation
	License, Version 1.1 or any later version published by the
	Free Software Foundation, with no Invariant Sections, with no
	Front-Cover Texts, and with no Back-Cover Texts. A copy of
	this license can be found at <ulink
	  url="http://www.fsf.org/copyleft/fdl.html">http://www.fsf.org/copyleft/fdl.html</ulink>.
      </para>
    </legalnotice>
  </articleinfo>
  <section>
    <title>Introduction</title>
    <para>
      The aim of this package is to make <ulink
      url="http://www.comedi.org">Comedi devices</ulink> available as
      the interfaces defined in the Orocos Device Interface.  It gives
      a short introduction to configuring Comedi devices under Linux
      and then demonstrates how the Orocos Comedi classes can be used
      to access these devices.
    </para>
  </section>
  <section id="setup">
    <title>Comedi setup</title>
    <para>
      For each device supported by comedi, you need to
      <itemizedlist>
	<listitem>
	  <para>Load the kernel module device driver</para>
	</listitem>
	<listitem>
	  <para>Configure the device with comedi_config</para>
	</listitem>
	<listitem>
	  <para>Take notes of the device's subdevices using comedi_info</para>
	</listitem>
      </itemizedlist>
      The Orocos Debian repository contains all the above modules and
      tools in the libcomedi-dev and comedi-modules packages, but the
      same procedure can be used if you compiled Comedi from source.
    </para>
    <section>
      <title>Loading kernel modules</title>
      <para>
	Head over to the <ulink url="http://www.comedi.org/hardware">
	Comedi supported hardware listing</ulink> and look up your
	PCI card. The list will tell you which kernel modules drives this
	card. For example, the NI-6527 is driven by the ni6527 kernel module.
	Then you must type at the prompt:
	<command>modprobe ni6527</command>
	Which loads this module. Look at the output of <command>dmesg</command>
	to see if the device was found. Repeat this procedure for each
	Comedi supported card type you have. It is possible that one driver
	drives multiple types of cards, for example, such as the <filename>ni_pcimio</filename>
	driver.
      </para>
      <para>
	When all went well, you can inspect <filename>/proc/comedi</filename>
	and see if your cards are listed by typing <command>cat /proc/comedi</command>.
      </para>
    </section>
    <section>
      <title>Configuring the devices</title>
      <para>
	Now each device needs to be attached to a
	<filename>/dev/comediN</filename> device descriptor, where
	<emphasis>N</emphasis> starts from zero.The
	<command>comedi_config</command> tool does this job. For each
	PCI card, you need to lookup what the device name is. This may
	be another name than the kernel module, or be very similar.
	See <command>cat /proc/comedi</command> for the correct names.
      </para>
      <para>
	So for our NI 6527 card, you type: 
	<command>comedi_config -f /dev/comedi0 ni6527 </command>
	This assigns the first ni6527 card in your PC to <filename>/dev/comedi0</filename>.
	You can repeat this for each PCI card, but must assign them 
	to another dev file descriptor number.
      </para>
    </section>
    <section>
      <title>Looking up the sub-device info</title>
      <para>
	The last step you need to take is listing the
	subdevices and their number by using 
	<command>comedi_info -f /dev/comediN</command>. For
	Our NI-6527 card, this would be:
	<programlisting>  <command>comedi_info -f /dev/comedi0</command>
	</programlisting>
	Now note that the digital Input subdevice is number 0.  You
	will need this number to finally setup your Orocos Comedi
	device classes. Note each subdevice you will use.
      </para>
      <note>
	<para>
	  Subdevices for incremental encoders are called counters.
	</para>
      </note>
    </section>
  </section>
  <section>
    <title>Setting up the Orocos Comedi classes</title>
    <para>
      The last step is creating the necessary objects.
      First create a <classname>OCL::ComediDevice</classname>
      object for each configured card in your system:
      <programlisting>  int minor = 0;
  ComediDevice* cdev0 = new ComediDevice( minor );
      </programlisting>
      Where <emphasis>minor</emphasis> is the same number as your
      <filename>/dev/comedi0</filename> device descriptor used earlier.
    </para>
    <para>
      Next for each sub device on your card, create a 
      <classname>ComediSubDeviceX</classname> object. For example,
      for digital inputs you write:
      <programlisting>  int subdev = 0;
  DigitalInInterface* cdev0_DIn = new <classname>ComediSubDeviceDIn</classname>( cdev0, 0 );
      </programlisting>
      The first argument is the ComediDevice created earlier, the
      second argument is the subdevice. An error will be printed if
      the subdevice is not a Digital input.
    </para>
    <para>
      As you can see, the <classname>OCL::ComediSubDeviceDIn</classname> is
      an implementation of the <classname>RTT::DigitalInInterface</classname>
      class of the Real-Time Toolkit. These interfaces can be name served
      such that other parts of the application can pick the device up
      just by using its name. You need to provide a name argument upon
      construction of the ComediSubDevice object:
      <programlisting>  int subdev = 0;
  DigitalInInterface* cdev0_DIn = new <classname>ComediSubDeviceDIn</classname>( cdev0, "Digital1", 0 );
      
  // Somewhere else in the application, for example in a component's
  // configureHook():
  bool MyComponent::configureHook() {

     // ... din is a DigitalInInterface* 
     din = DigitalInInterface::getObject("Digital1");
     if ( din == 0 ) {
        log(Error) &lt;&lt; "Device 'Digital1' not found !" &lt;&lt; endlog();
        return false;
     }
     return true;
  } </programlisting>
    Even better, you could make 'Digital1' an Orocos property such
    that you can reconfigure for using another subdevice.
    </para>
    <para>
      This name serving allows that multiple components use the same
      subdevice such that you can optimally use all the channels of your
      devices.
    </para>
  </section>
  <section>
    <title>Using SubDevices</title>
    <para>
      Orocos provides two ways of writing or reading a channel: directly
      using the device interface class or using a helper object. Both are
      equivalent from a performance point of view, as the helper objects are
      inlined.
    </para>
    <section>
      <title>Direct Device Interface</title>
      <para>
	There are 6 classes which define the interface of the possible subdevices:
      </para>
	<table>
	  <title>IO Interface Classes</title>
	  <tgroup cols="3">
	    <thead>
	      <row>
		<entry>Interface</entry>
		<entry>Comedi Implementation</entry>
		<entry>Description</entry>
	      </row>
	    </thead>
	    <tbody>
	      <row>
		<entry><classname>RTT::AnalogInInterface</classname></entry>
		<entry><classname>OCL::ComediSubDeviceAIn</classname></entry>
		<entry>Reading analog input channels</entry>
	      </row>
	      <row>
		<!-- one of (entrytbl entry) -->
		<entry><classname>RTT::AnalogOutInterface</classname></entry>
		<entry><classname>OCL::ComediSubDeviceAOut</classname></entry>
		<entry>Writing analog output channels</entry>
	      </row>
	      <row>
		<!-- one of (entrytbl entry) -->
		<entry><classname>RTT::DigitalInInterface</classname></entry>
		<entry><classname>OCL::ComediSubDeviceDIn</classname></entry>
		<entry>Reading digital bits</entry>
	      </row>
	      <row>
		<!-- one of (entrytbl entry) -->
		<entry><classname>RTT::DigitalOutInterface</classname></entry>
		<entry><classname>OCL::ComediSubDeviceDOut</classname></entry>
		<entry>Writing digital bits</entry>
	      </row>
	      <row>
		<!-- one of (entrytbl entry) -->
		<entry>RTT::PulseTrainGeneratorInterface</entry>
		<entry><classname>OCL::ComediPulseTrainGenerator</classname></entry>
		<entry>Sends out block waves</entry>
	      </row>
	      <row>
		<!-- one of (entrytbl entry) -->
		<entry><classname>RTT::EncoderInterface</classname></entry>
		<entry><classname>OCL::ComediEncoder</classname></entry>
		<entry>A position/turn incremental encoder</entry>
	      </row>
	    </tbody>
	  </tgroup>
	</table>
      <para>
	Consult the API documentation for the available functions.
      </para>
    </section>
    <section>
      <title>Using Helper Objects</title>
      <para>
	<programlisting>
	</programlisting>
      </para>
    </section>
  </section>
</article>
