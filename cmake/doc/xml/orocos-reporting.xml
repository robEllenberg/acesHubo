<?xml version='1.0'?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd"
[
<!ENTITY orocos      "<acronym>Orocos</acronym>">
]
>

<article>
  <articleinfo>
    <title>The Reporting Component</title>
    <copyright>
      <year>2006,2007,2008,2009</year>
      <holder>Peter Soetens, FMTC</holder>
    </copyright>

    <legalnotice>
      <para>
	Permission is granted to copy, distribute and/or modify this document
	under the terms of the GNU Free Documentation License, Version 1.1 or
	any later version published by the Free Software Foundation, with no
	Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
	Texts. A copy of this license can be found at
	<ulink
	  url="http://www.fsf.org/copyleft/fdl.html">http://www.fsf.org/copyleft/fdl.html</ulink>.
      </para>
    </legalnotice>

  </articleinfo>
  
  <section>
    <title>Introduction</title>
    <para>
      This document describes the Orocos
      <classname>OCL::ReportingComponent</classname> for monitoring
      and capturing data exchanged between Orocos components.
    </para>
    <section>
      <title>Principle</title>
      <para>
	Each Orocos component can have one or more data ports. One
	can configure the reporting components such that one or more
	ports are captured of one or more peer components. The sample
	rate and the file format can be selected.
      </para>
      <para>
	A common usage scenario of the
	<classname>OCL::ReportingComponent</classname> goes
	as follows. An Orocos application is created which contains a
	reporting component and various other components. The
	reporting component is peer-connected to all components which
	must be monitored. An XML file or script command defines which
	data ports to log.  When the reporting component is started,
	it reads the ports and writes the exchanged data to a file at
	a given sample rate.
      </para>
      <figure id="fig-reporting-example"><title>Component Reporting Example</title>
      <mediaobject>
	<imageobject role="html">
	  <imagedata fileref="images/reporting-example" />
	</imageobject>
	<imageobject role="fo">
	  <imagedata fileref="images/hires/reporting-example" width="100%" scalefit="1" />
	</imageobject>
	<caption><para>
	</para></caption>
      </mediaobject>
      </figure>
      <para>
	One can not use the <classname>OCL::ReportingComponent</classname> 
	directly but must use a derived component which implements
	the method of writing out the data. There exists two variants:
	<classname>OCL::FileReporting</classname> for writing data to a
	file and <classname>OCL::ConsoleReporting</classname> which prints
	the data directly to the screen. These two examples can aid you
	in writing your own data format or to transfer data over a
	network connection.
      </para>
    </section>
  </section>
  <section>
    <title>Setup Procedure</title>
    <para>
      The <classname>OCL::ReportingComponent</classname> is configured using
      a single XML file which sets the component's properties and describes
      which components and ports to monitor.
    </para>
    <para>
      In order to report data of other components, they must be added as a Peer
      to the reporting component. The following C++ setup code does this for the
      example above (<xref linkend="fig-reporting-example"/>):
      <programlisting>  #include &lt;ocl/FileReporting.hpp>

  // ...
  OCL::FileReporting reporter("Reporter");
  Controller controller("Controller");
  Plant      plant("Plant");
  Camera     cam0("Camera");

  reporter.addPeer( &amp;controller );
  reporter.addPeer( &amp;camera );
  controller.addPeer( &amp;plant );</programlisting>
    </para>
    <para>
      Alternatively, if you use the Deployer, you might add this listing
      to your application XML file, instead of using the hard-coded C++ setup
      above:
    </para>
    <programlisting><![CDATA[   <simple name="Import" type="string"><value>/usr/lib/liborocos-reporting</value></simple>

  <struct name="Reporter" type="OCL::FileReporting">
    <struct name="Activity" type="PeriodicActivity">
      <simple name="Period" type="double"><value>0.01</value></simple>
      <simple name="Priority" type="short"><value>0</value></simple>
      <simple name="Scheduler" type="string"><value>ORO_SCHED_OTHER</value></simple>
    </struct>
    <simple name="AutoConf" type="boolean"><value>1</value></simple>
    <simple name="AutoStart" type="boolean"><value>0</value></simple>
    <simple name="AutoSave" type="boolean"><value>1</value></simple>
    <simple name="LoadProperties" type="string"><value>reporting.cpf</value></simple>
    <!-- List all peers (uni-directional) -->
    <struct name="Peers" type="PropertyBag">
      <simple type="string"><value>Controller</value></simple>
      <simple type="string"><value>Camera</value></simple>
    </struct>]]></programlisting>
    <para>
      Note that the AutoSave flag is turned on (this is optional) to
      save the settings when the Reporter component is cleaned up by
      the Deployer.
    </para>
    <section>
      <title>Property Configuration File</title>
      <para>
	This is an example property file:
      </para>
      <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE properties SYSTEM "cpf.dtd">
<properties>
  <simple name="AutoTrigger" type="boolean"><description>When set to 1, the data is taken upon each update(), otherwise, the data is only taken when the user invokes 'snapshot()'.</description><value>1</value></simple>
  <simple name="WriteHeader" type="boolean"><description>Set to true to start each report with a header.</description><value>1</value></simple>
  <simple name="Decompose" type="boolean"><description>Set to true to decompose data ports.</description><value>1</value></simple>
  <simple name="ReportFile" type="string"><description>Location on disc to store the reports.</description><value>reports.dat</value></simple>
  <simple name="Synchronize" type="boolean"><description>Set to true if the timestamp should be synchronized with the logging</description><value>0</value></simple>

  <struct name="ReportData" type="PropertyBag">
     <description>A PropertyBag which defines which ports or components to report.</description>
     <simple name="Component" type="string"><value>Camera</value></simple>

     <simple name="Port" type="string"><value>Controller.SensorValues</value></simple>
     <simple name="Port" type="string"><value>Controller.SteeringSignals</value></simple>
  </struct>
</properties>]]></programlisting>
       <para>
	 The <option>AutoTrigger</option> property toggles if the data is captured
	 at the time a new line is written to file or at a user determined time.
	 If <option>AutoTrigger</option> is set to false, a data snapshot is taken
	 when the user invokes the <function>snapshot()</function> method of the
	 ReportingComponent.
       </para>
       <para>
	 If <option>WriteHeader</option> is set to true, a header will be written
	 describing the file format layout.
       </para>
       <para>
	 If <option>Decompose</option> is set to true, complex data on ports will
	 be decomposed into separate table columns. Otherwise, each port appears as one
	 column. 
       </para>
    </section>
    <section>
      <title>ReportData section</title>
      <para>
	The <option>ReportData</option> struct describes the ports to monitor.
	As the example shows (see also <xref linkend="fig-reporting-example"/>),
	a complete component can be monitored (Camera) or specific ports of
	a peer component can be monitored. The reporting component can monitor
	any data type as long as it is known in the Orocos type system. Extending
	the type system is explained in the Plugin Manual of the Real-Time Toolkit.
      </para>
    </section>
    <section>
      <title>Reading the configuration file</title>
      <para>
	The property file of the reporting component <emphasis>must</emphasis> be read
	with the loadProperties script method:
	<screen>  marshalling.loadProperties("reporting.cpf")</screen>
	You can not use <function>readProperties()</function> because only 
	<function>loadProperties</function> loads your <option>ReportData</option> struct into the
	ReportingComponent.
      </para>
      <para>
	With <screen>  marshalling.writeProperties("reporting.cpf")</screen>,
	the current configuration can be written to disk again.
      </para>
    </section>
    <section>
      <title>Scripting commands</title>
      <para>
	The scripting commands of the reporting components can be listed 
	using the <command>this</command> command on the TaskBrowser. Below is
	a snippet of the output:
      </para>
      <screen>  Method     : bool reportComponent( string const&amp; Component )
   Add a Component for reporting. Only works if Component is connected.
   Component : Name of the Component
  Method     : bool reportData( string const&amp; Component, string const&amp; DataObject )
   Add a Component's DataSource for reporting. Only works if DataObject exists and Component is connected.
   Component : Name of the Component
   DataObject : Name of the DataObject. For example, a property or attribute.
  Method     : bool reportPort( string const&amp; Component, string const&amp; Port )
   Add a Component's Connection or Port for reporting.
   Component : Name of the Component
   Port : Name of the Port to the connection.
  Method     : bool screenComponent( string const&amp; Component )
   Display the variables and ports of a Component.
   Component : Name of the Component
  Method     : void snapshot( )
   Take a new shapshot of the data and set the timestamp.
  Method     : bool unreportComponent( string const&amp; Component )
   Remove a Component from reporting.
   Component : Name of the Component
  Method     : bool unreportData( string const&amp; Component, string const&amp; DataObject )
   Remove a DataObject from reporting.
   Component : Name of the Component
   DataObject : Name of the DataObject.
  Method     : bool unreportPort( string const&amp; Component, string const&amp; Port )
   Remove a Connection for reporting.
   Component : Name of the Component
   Port : Name of the Port to the connection.</screen>
    </section>
  </section>
</article>
